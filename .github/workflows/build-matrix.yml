
name: Cross-Platform Build Matrix

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-matrix:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest

          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            cross: true

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-13  # Intel-based macOS
          - target: aarch64-apple-darwin
            os: macos-latest  # Apple Silicon macOS

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install cross-compilation dependencies (ARM64)
        if: matrix.cross == true && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl pkg-config
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows dependencies are typically handled by vcpkg or pre-installed
          echo "Windows dependencies ready"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (native)
        if: matrix.cross != true
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (cross-compilation)
        if: matrix.cross == true
        run: cross build --release --target ${{ matrix.target }}

      - name: Test (native only)
        if: matrix.cross != true
        run: cargo test --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: graphbit-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/graphbit*
            target/${{ matrix.target }}/release/*.dll
            target/${{ matrix.target }}/release/*.so
            target/${{ matrix.target }}/release/*.dylib

  python-wheels:
    name: Python Wheels (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            manylinux: auto
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            manylinux: auto
            cross: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            cross: true
          - target: x86_64-apple-darwin
            os: macos-13  # Intel-based macOS
          - target: aarch64-apple-darwin
            os: macos-latest  # Apple Silicon macOS

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install maturin
        run: pip install maturin

      - name: Install OpenSSL (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Build wheels (Linux x86_64)
        if: runner.os == 'Linux' && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path python/Cargo.toml
          sccache: 'true'
          manylinux: ${{ matrix.manylinux }}
          before-script-linux: |
            yum install -y openssl-devel

      - name: Build wheels (Linux ARM64)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path python/Cargo.toml
          sccache: 'true'
          manylinux: ${{ matrix.manylinux }}
          before-script-linux: |
            yum install -y openssl-devel
            export PKG_CONFIG_ALLOW_CROSS=1

      - name: Build wheels (Windows/macOS native)
        if: runner.os != 'Linux' && matrix.cross != true
        run: |
          cd python
          maturin build --release --target ${{ matrix.target }} --out ../dist

      - name: Build wheels (Windows ARM64 cross-compilation)
        if: runner.os == 'Windows' && matrix.cross == true
        run: |
          cd python
          # Note: Cross-compilation for Windows ARM64 may require additional setup
          maturin build --release --target ${{ matrix.target }} --out ../dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: dist/

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: graphbit:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max