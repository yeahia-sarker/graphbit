[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "graphbit"
version = "0.4.0"
description = "GraphBit - Advanced workflow automation and AI agent orchestration library"
authors = [
    {name = "GraphBit Team"}
]
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = {file = "../LICENSE.md"}
homepage = "https://github.com/InfinitiBit/graphbit"
repository = "https://github.com/InfinitiBit/graphbit"
keywords = ["workflow", "automation", "ai", "agent", "orchestration"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "aiofiles>=23.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
# AI/ML dependencies
ai = [
    "anthropic>=0.24.0",
    "openai>=1.30.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.3.19",
    "langchain-ollama>=0.3.7",
    "langgraph>=0.1.0",
    "llama-index>=0.9.0",
    "llama-index-llms-anthropic>=0.8.5",
    "llama-index-llms-ollama>=0.7.1",
    "crewai>=0.41.0",
    "pydantic-ai>=0.0.5",
]

# Vector database dependencies
vectordb = [
    "astrapy>=1.0.0",
    "chromadb>=0.4.0",
    "elasticsearch>=8.0.0",
    "faiss-cpu>=1.7.0",
    "pinecone>=4.0.0",
    "pymilvus>=2.3.0",
    "qdrant-client>=1.7.0",
    "weaviate-client>=4.4.0",
]

# Database dependencies
database = [
    "boto3>=1.26.0",
    "ibm-db>=3.1.0",
    "mariadb>=1.1.0",
    "psycopg2>=2.9.0",
    "pymongo>=4.0.0",
]

# Benchmarking and analysis
benchmark = [
    "click>=8.2.1",
    "matplotlib>=3.7.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "psutil>=5.9.0",
    "seaborn>=0.12.0",
    "tabulate>=0.9.0",
    "memory-profiler>=0.61.0",
]

# Utilities
utils = [
    "requests>=2.25.0",
    "types-pyyaml>=6.0.12.20250822",
]

# Full installation with all optional dependencies
full = [
    "anthropic>=0.24.0",
    "openai>=1.30.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.3.19",
    "langchain-ollama>=0.3.7",
    "langgraph>=0.1.0",
    "llama-index>=0.9.0",
    "llama-index-llms-anthropic>=0.8.5",
    "llama-index-llms-ollama>=0.7.1",
    "crewai>=0.41.0",
    "pydantic-ai>=0.0.5",
    "astrapy>=1.0.0",
    "chromadb>=0.4.0",
    "elasticsearch>=8.0.0",
    "faiss-cpu>=1.7.0",
    "pinecone>=4.0.0",
    "pymilvus>=2.3.0",
    "qdrant-client>=1.7.0",
    "weaviate-client>=4.4.0",
    "boto3>=1.26.0",
    "ibm-db>=3.1.0",
    "mariadb>=1.1.0",
    "psycopg2>=2.9.0",
    "pymongo>=4.0.0",
    "click>=8.2.1",
    "matplotlib>=3.7.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "psutil>=5.9.0",
    "seaborn>=0.12.0",
    "tabulate>=0.9.0",
    "memory-profiler>=0.61.0",
    "requests>=2.25.0",
    "types-pyyaml>=6.0.12.20250822",
]

[project.urls]
Homepage = "https://github.com/InfinitiBit/graphbit"
Repository = "https://github.com/InfinitiBit/graphbit"
Documentation = "https://github.com/InfinitiBit/graphbit"
"Bug Tracker" = "https://github.com/InfinitiBit/graphbit/issues"

[tool.maturin]
# PyO3 bindings configuration
bindings = "pyo3"
# Compatibility settings for PyPI distribution
compatibility = "linux"
# Module configuration
module-name = "graphbit"
# Build profile for optimized releases
profile = "release"
# Skip auditwheel for cross-compilation builds
skip-auditwheel = false
# Build optimizations
strip = true
# Python source directory (if any Python code exists)
# python-source = "src"  # Uncomment if you have Python source files

[tool.cibuildwheel]
# Build wheels for these Python versions
build = "cp310-* cp311-* cp312-*"
# Skip 32-bit builds and PyPy
skip = "*-win32 *-manylinux_i686 pp*"

[tool.cibuildwheel.linux]
# Use manylinux2014 for better compatibility
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
# Install OpenSSL development libraries
before-all = """
if command -v yum >/dev/null 2>&1; then
  yum install -y openssl-devel
elif command -v dnf >/dev/null 2>&1; then
  dnf install -y openssl-devel
elif command -v apt-get >/dev/null 2>&1; then
  apt-get update && apt-get install -y libssl-dev
elif command -v apk >/dev/null 2>&1; then
  apk add --no-cache openssl-dev
fi
"""

[tool.cibuildwheel.macos]
# macOS specific settings
before-all = "brew install openssl pkg-config"
environment = {PKG_CONFIG_PATH = "/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig"}

[tool.cibuildwheel.windows]
# Windows specific settings - OpenSSL is typically available via vcpkg or pre-installed
before-build = ""
